{"ast":null,"code":"var _jsxFileName = \"D:\\\\chess-clone\\\\frontend\\\\src\\\\components\\\\chessboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Chess } from 'chess.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chessboard({\n  board,\n  socket\n}) {\n  _s();\n  const cellNameAlpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n  // const chess = new Chess();\n  console.log(board);\n  const [from, setFrom] = useState(null);\n  const [toValue, setToValue] = useState(null);\n  return (\n    /*#__PURE__*/\n    // create a chessboard with chess.js\n    _jsxDEV(\"div\", {\n      children: board.map((row, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: row.map((square, j) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => {\n                if (!from) {\n                  setFrom(square === null || square === void 0 ? void 0 : square.square);\n                  console.log(from);\n                } else {\n                  let temp = cellNameAlpha[j] + (8 - i);\n                  socket.send(JSON.stringify({\n                    type: \"move\",\n                    from: from,\n                    to: temp\n                  }));\n                  setFrom(null);\n                }\n              },\n              className: `w-8 h-8 text-black flex items-center justify-center ${(i + j) % 2 == 0 ? 'bg-green-500' : 'bg-white'}`,\n              children: square ? square.type : \"\"\n            }, j, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 28\n            }, this);\n          })\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(Chessboard, \"AkmpEtBBZmmUrJh8xAgZ2C4P8aE=\");\n_c = Chessboard;\nexport default Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["React","useState","Chess","jsxDEV","_jsxDEV","Chessboard","board","socket","_s","cellNameAlpha","console","log","from","setFrom","toValue","setToValue","children","map","row","i","className","square","j","onClick","temp","send","JSON","stringify","type","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/chess-clone/frontend/src/components/chessboard.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport {Chess} from 'chess.js'\r\n\r\n\r\nfunction Chessboard({board,socket}) {\r\n    const cellNameAlpha = ['a','b','c','d','e','f','g','h']\r\n    // const chess = new Chess();\r\n    console.log(board)\r\n    const [from, setFrom] = useState(null);\r\n    const [toValue, setToValue] = useState(null);\r\n\r\n  return (\r\n    // create a chessboard with chess.js\r\n\r\n    <div>\r\n        {\r\n            board.map((row,i)=>\r\n        {\r\n            return <div key={i} className='flex'>\r\n                {row.map((square,j)=>\r\n                {\r\n                    return <div\r\n                     key={j}  \r\n                     onClick={\r\n                         ()=>\r\n                         {\r\n                if(!from)\r\n                {\r\n                    setFrom(square?.square)\r\n                    console.log(from)\r\n                }\r\n                else{\r\n                    let temp = cellNameAlpha[j]+(8-i)\r\n                                         socket.send(JSON.stringify({\r\n                        type : \"move\",\r\n                        from : from,\r\n                        to : temp\r\n                    }))\r\n                    setFrom(null)\r\n                \r\n                    \r\n                }\r\n            \r\n\r\n            }}\r\n                    className={`w-8 h-8 text-black flex items-center justify-center ${(i+j)%2==0 ? 'bg-green-500': 'bg-white'}`}>\r\n                        {square? square.type : \"\"}\r\n                        </div>\r\n                })}\r\n                </div>\r\n        })\r\n        }\r\n        \r\n    </div>\r\n    \r\n)\r\n}\r\n\r\nexport default Chessboard"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAAQC,KAAK,QAAO,UAAU;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAG9B,SAASC,UAAUA,CAAC;EAACC,KAAK;EAACC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAChC,MAAMC,aAAa,GAAG,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC;EACvD;EACAC,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;EAClB,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE9C;IAAA;IACE;IAEAG,OAAA;MAAAY,QAAA,EAEQV,KAAK,CAACW,GAAG,CAAC,CAACC,GAAG,EAACC,CAAC,KACpB;QACI,oBAAOf,OAAA;UAAagB,SAAS,EAAC,MAAM;UAAAJ,QAAA,EAC/BE,GAAG,CAACD,GAAG,CAAC,CAACI,MAAM,EAACC,CAAC,KAClB;YACI,oBAAOlB,OAAA;cAENmB,OAAO,EACHA,CAAA,KACA;gBACT,IAAG,CAACX,IAAI,EACR;kBACIC,OAAO,CAACQ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEA,MAAM,CAAC;kBACvBX,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;gBACrB,CAAC,MACG;kBACA,IAAIY,IAAI,GAAGf,aAAa,CAACa,CAAC,CAAC,IAAE,CAAC,GAACH,CAAC,CAAC;kBACZZ,MAAM,CAACkB,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;oBAC5CC,IAAI,EAAG,MAAM;oBACbhB,IAAI,EAAGA,IAAI;oBACXiB,EAAE,EAAGL;kBACT,CAAC,CAAC,CAAC;kBACHX,OAAO,CAAC,IAAI,CAAC;gBAGjB;cAGJ,CAAE;cACMO,SAAS,EAAG,uDAAsD,CAACD,CAAC,GAACG,CAAC,IAAE,CAAC,IAAE,CAAC,GAAG,cAAc,GAAE,UAAW,EAAE;cAAAN,QAAA,EACvGK,MAAM,GAAEA,MAAM,CAACO,IAAI,GAAG;YAAE,GAxBvBN,CAAC;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAyBE,CAAC;UACd,CAAC;QAAC,GA9BWd,CAAC;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA+BT,CAAC;MACd,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGD;EAAC;AAGV;AAACzB,EAAA,CApDQH,UAAU;AAAA6B,EAAA,GAAV7B,UAAU;AAsDnB,eAAeA,UAAU;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}